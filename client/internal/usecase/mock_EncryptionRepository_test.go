// Code generated by mockery v2.26.1. DO NOT EDIT.

package usecase

import mock "github.com/stretchr/testify/mock"

// MockEncryptionRepository is an autogenerated mock type for the EncryptionRepository type
type MockEncryptionRepository struct {
	mock.Mock
}

type MockEncryptionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEncryptionRepository) EXPECT() *MockEncryptionRepository_Expecter {
	return &MockEncryptionRepository_Expecter{mock: &_m.Mock}
}

// GenerateLock provides a mock function with given fields: salt, password
func (_m *MockEncryptionRepository) GenerateLock(salt []byte, password string) []byte {
	ret := _m.Called(salt, password)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, string) []byte); ok {
		r0 = rf(salt, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockEncryptionRepository_GenerateLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateLock'
type MockEncryptionRepository_GenerateLock_Call struct {
	*mock.Call
}

// GenerateLock is a helper method to define mock.On call
//   - salt []byte
//   - password string
func (_e *MockEncryptionRepository_Expecter) GenerateLock(salt interface{}, password interface{}) *MockEncryptionRepository_GenerateLock_Call {
	return &MockEncryptionRepository_GenerateLock_Call{Call: _e.mock.On("GenerateLock", salt, password)}
}

func (_c *MockEncryptionRepository_GenerateLock_Call) Run(run func(salt []byte, password string)) *MockEncryptionRepository_GenerateLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(string))
	})
	return _c
}

func (_c *MockEncryptionRepository_GenerateLock_Call) Return(_a0 []byte) *MockEncryptionRepository_GenerateLock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionRepository_GenerateLock_Call) RunAndReturn(run func([]byte, string) []byte) *MockEncryptionRepository_GenerateLock_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateSalt provides a mock function with given fields:
func (_m *MockEncryptionRepository) GenerateSalt() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEncryptionRepository_GenerateSalt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateSalt'
type MockEncryptionRepository_GenerateSalt_Call struct {
	*mock.Call
}

// GenerateSalt is a helper method to define mock.On call
func (_e *MockEncryptionRepository_Expecter) GenerateSalt() *MockEncryptionRepository_GenerateSalt_Call {
	return &MockEncryptionRepository_GenerateSalt_Call{Call: _e.mock.On("GenerateSalt")}
}

func (_c *MockEncryptionRepository_GenerateSalt_Call) Run(run func()) *MockEncryptionRepository_GenerateSalt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEncryptionRepository_GenerateSalt_Call) Return(_a0 []byte, _a1 error) *MockEncryptionRepository_GenerateSalt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEncryptionRepository_GenerateSalt_Call) RunAndReturn(run func() ([]byte, error)) *MockEncryptionRepository_GenerateSalt_Call {
	_c.Call.Return(run)
	return _c
}

// IsBadUserData provides a mock function with given fields: err
func (_m *MockEncryptionRepository) IsBadUserData(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEncryptionRepository_IsBadUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsBadUserData'
type MockEncryptionRepository_IsBadUserData_Call struct {
	*mock.Call
}

// IsBadUserData is a helper method to define mock.On call
//   - err error
func (_e *MockEncryptionRepository_Expecter) IsBadUserData(err interface{}) *MockEncryptionRepository_IsBadUserData_Call {
	return &MockEncryptionRepository_IsBadUserData_Call{Call: _e.mock.On("IsBadUserData", err)}
}

func (_c *MockEncryptionRepository_IsBadUserData_Call) Run(run func(err error)) *MockEncryptionRepository_IsBadUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockEncryptionRepository_IsBadUserData_Call) Return(_a0 bool) *MockEncryptionRepository_IsBadUserData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEncryptionRepository_IsBadUserData_Call) RunAndReturn(run func(error) bool) *MockEncryptionRepository_IsBadUserData_Call {
	_c.Call.Return(run)
	return _c
}

// LockData provides a mock function with given fields: data, lock
func (_m *MockEncryptionRepository) LockData(data []byte, lock []byte) ([]byte, error) {
	ret := _m.Called(data, lock)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) ([]byte, error)); ok {
		return rf(data, lock)
	}
	if rf, ok := ret.Get(0).(func([]byte, []byte) []byte); ok {
		r0 = rf(data, lock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(data, lock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEncryptionRepository_LockData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockData'
type MockEncryptionRepository_LockData_Call struct {
	*mock.Call
}

// LockData is a helper method to define mock.On call
//   - data []byte
//   - lock []byte
func (_e *MockEncryptionRepository_Expecter) LockData(data interface{}, lock interface{}) *MockEncryptionRepository_LockData_Call {
	return &MockEncryptionRepository_LockData_Call{Call: _e.mock.On("LockData", data, lock)}
}

func (_c *MockEncryptionRepository_LockData_Call) Run(run func(data []byte, lock []byte)) *MockEncryptionRepository_LockData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *MockEncryptionRepository_LockData_Call) Return(_a0 []byte, _a1 error) *MockEncryptionRepository_LockData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEncryptionRepository_LockData_Call) RunAndReturn(run func([]byte, []byte) ([]byte, error)) *MockEncryptionRepository_LockData_Call {
	_c.Call.Return(run)
	return _c
}

// UnlockData provides a mock function with given fields: data, lock
func (_m *MockEncryptionRepository) UnlockData(data []byte, lock []byte) ([]byte, error) {
	ret := _m.Called(data, lock)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) ([]byte, error)); ok {
		return rf(data, lock)
	}
	if rf, ok := ret.Get(0).(func([]byte, []byte) []byte); ok {
		r0 = rf(data, lock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, []byte) error); ok {
		r1 = rf(data, lock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEncryptionRepository_UnlockData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlockData'
type MockEncryptionRepository_UnlockData_Call struct {
	*mock.Call
}

// UnlockData is a helper method to define mock.On call
//   - data []byte
//   - lock []byte
func (_e *MockEncryptionRepository_Expecter) UnlockData(data interface{}, lock interface{}) *MockEncryptionRepository_UnlockData_Call {
	return &MockEncryptionRepository_UnlockData_Call{Call: _e.mock.On("UnlockData", data, lock)}
}

func (_c *MockEncryptionRepository_UnlockData_Call) Run(run func(data []byte, lock []byte)) *MockEncryptionRepository_UnlockData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *MockEncryptionRepository_UnlockData_Call) Return(_a0 []byte, _a1 error) *MockEncryptionRepository_UnlockData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEncryptionRepository_UnlockData_Call) RunAndReturn(run func([]byte, []byte) ([]byte, error)) *MockEncryptionRepository_UnlockData_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockEncryptionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEncryptionRepository creates a new instance of MockEncryptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEncryptionRepository(t mockConstructorTestingTNewMockEncryptionRepository) *MockEncryptionRepository {
	mock := &MockEncryptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
