// Code generated by mockery v2.26.1. DO NOT EDIT.

package usecase

import (
	models "github.com/Puena/password-keeper/client/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockDeviceRepository is an autogenerated mock type for the DeviceRepository type
type MockDeviceRepository struct {
	mock.Mock
}

type MockDeviceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeviceRepository) EXPECT() *MockDeviceRepository_Expecter {
	return &MockDeviceRepository_Expecter{mock: &_m.Mock}
}

// ExtractDeviceName provides a mock function with given fields:
func (_m *MockDeviceRepository) ExtractDeviceName() (*models.DeviceInfo, error) {
	ret := _m.Called()

	var r0 *models.DeviceInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() (*models.DeviceInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *models.DeviceInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeviceInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeviceRepository_ExtractDeviceName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractDeviceName'
type MockDeviceRepository_ExtractDeviceName_Call struct {
	*mock.Call
}

// ExtractDeviceName is a helper method to define mock.On call
func (_e *MockDeviceRepository_Expecter) ExtractDeviceName() *MockDeviceRepository_ExtractDeviceName_Call {
	return &MockDeviceRepository_ExtractDeviceName_Call{Call: _e.mock.On("ExtractDeviceName")}
}

func (_c *MockDeviceRepository_ExtractDeviceName_Call) Run(run func()) *MockDeviceRepository_ExtractDeviceName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDeviceRepository_ExtractDeviceName_Call) Return(_a0 *models.DeviceInfo, _a1 error) *MockDeviceRepository_ExtractDeviceName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeviceRepository_ExtractDeviceName_Call) RunAndReturn(run func() (*models.DeviceInfo, error)) *MockDeviceRepository_ExtractDeviceName_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockDeviceRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDeviceRepository creates a new instance of MockDeviceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDeviceRepository(t mockConstructorTestingTNewMockDeviceRepository) *MockDeviceRepository {
	mock := &MockDeviceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
