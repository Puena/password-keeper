// Code generated by mockery v2.26.1. DO NOT EDIT.

package usecase

import mock "github.com/stretchr/testify/mock"

// MockUsecasesRepositories is an autogenerated mock type for the UsecasesRepositories type
type MockUsecasesRepositories struct {
	mock.Mock
}

type MockUsecasesRepositories_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsecasesRepositories) EXPECT() *MockUsecasesRepositories_Expecter {
	return &MockUsecasesRepositories_Expecter{mock: &_m.Mock}
}

// Crypto provides a mock function with given fields:
func (_m *MockUsecasesRepositories) Crypto() EncryptionRepository {
	ret := _m.Called()

	var r0 EncryptionRepository
	if rf, ok := ret.Get(0).(func() EncryptionRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EncryptionRepository)
		}
	}

	return r0
}

// MockUsecasesRepositories_Crypto_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Crypto'
type MockUsecasesRepositories_Crypto_Call struct {
	*mock.Call
}

// Crypto is a helper method to define mock.On call
func (_e *MockUsecasesRepositories_Expecter) Crypto() *MockUsecasesRepositories_Crypto_Call {
	return &MockUsecasesRepositories_Crypto_Call{Call: _e.mock.On("Crypto")}
}

func (_c *MockUsecasesRepositories_Crypto_Call) Run(run func()) *MockUsecasesRepositories_Crypto_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUsecasesRepositories_Crypto_Call) Return(_a0 EncryptionRepository) *MockUsecasesRepositories_Crypto_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecasesRepositories_Crypto_Call) RunAndReturn(run func() EncryptionRepository) *MockUsecasesRepositories_Crypto_Call {
	_c.Call.Return(run)
	return _c
}

// Device provides a mock function with given fields:
func (_m *MockUsecasesRepositories) Device() DeviceRepository {
	ret := _m.Called()

	var r0 DeviceRepository
	if rf, ok := ret.Get(0).(func() DeviceRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DeviceRepository)
		}
	}

	return r0
}

// MockUsecasesRepositories_Device_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Device'
type MockUsecasesRepositories_Device_Call struct {
	*mock.Call
}

// Device is a helper method to define mock.On call
func (_e *MockUsecasesRepositories_Expecter) Device() *MockUsecasesRepositories_Device_Call {
	return &MockUsecasesRepositories_Device_Call{Call: _e.mock.On("Device")}
}

func (_c *MockUsecasesRepositories_Device_Call) Run(run func()) *MockUsecasesRepositories_Device_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUsecasesRepositories_Device_Call) Return(_a0 DeviceRepository) *MockUsecasesRepositories_Device_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecasesRepositories_Device_Call) RunAndReturn(run func() DeviceRepository) *MockUsecasesRepositories_Device_Call {
	_c.Call.Return(run)
	return _c
}

// Storage provides a mock function with given fields:
func (_m *MockUsecasesRepositories) Storage() StorageRepostiory {
	ret := _m.Called()

	var r0 StorageRepostiory
	if rf, ok := ret.Get(0).(func() StorageRepostiory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(StorageRepostiory)
		}
	}

	return r0
}

// MockUsecasesRepositories_Storage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Storage'
type MockUsecasesRepositories_Storage_Call struct {
	*mock.Call
}

// Storage is a helper method to define mock.On call
func (_e *MockUsecasesRepositories_Expecter) Storage() *MockUsecasesRepositories_Storage_Call {
	return &MockUsecasesRepositories_Storage_Call{Call: _e.mock.On("Storage")}
}

func (_c *MockUsecasesRepositories_Storage_Call) Run(run func()) *MockUsecasesRepositories_Storage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUsecasesRepositories_Storage_Call) Return(_a0 StorageRepostiory) *MockUsecasesRepositories_Storage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecasesRepositories_Storage_Call) RunAndReturn(run func() StorageRepostiory) *MockUsecasesRepositories_Storage_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with given fields:
func (_m *MockUsecasesRepositories) Sync() SyncRepository {
	ret := _m.Called()

	var r0 SyncRepository
	if rf, ok := ret.Get(0).(func() SyncRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(SyncRepository)
		}
	}

	return r0
}

// MockUsecasesRepositories_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type MockUsecasesRepositories_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
func (_e *MockUsecasesRepositories_Expecter) Sync() *MockUsecasesRepositories_Sync_Call {
	return &MockUsecasesRepositories_Sync_Call{Call: _e.mock.On("Sync")}
}

func (_c *MockUsecasesRepositories_Sync_Call) Run(run func()) *MockUsecasesRepositories_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUsecasesRepositories_Sync_Call) Return(_a0 SyncRepository) *MockUsecasesRepositories_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecasesRepositories_Sync_Call) RunAndReturn(run func() SyncRepository) *MockUsecasesRepositories_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// Viper provides a mock function with given fields:
func (_m *MockUsecasesRepositories) Viper() ViperRepository {
	ret := _m.Called()

	var r0 ViperRepository
	if rf, ok := ret.Get(0).(func() ViperRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ViperRepository)
		}
	}

	return r0
}

// MockUsecasesRepositories_Viper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Viper'
type MockUsecasesRepositories_Viper_Call struct {
	*mock.Call
}

// Viper is a helper method to define mock.On call
func (_e *MockUsecasesRepositories_Expecter) Viper() *MockUsecasesRepositories_Viper_Call {
	return &MockUsecasesRepositories_Viper_Call{Call: _e.mock.On("Viper")}
}

func (_c *MockUsecasesRepositories_Viper_Call) Run(run func()) *MockUsecasesRepositories_Viper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUsecasesRepositories_Viper_Call) Return(_a0 ViperRepository) *MockUsecasesRepositories_Viper_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecasesRepositories_Viper_Call) RunAndReturn(run func() ViperRepository) *MockUsecasesRepositories_Viper_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUsecasesRepositories interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUsecasesRepositories creates a new instance of MockUsecasesRepositories. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUsecasesRepositories(t mockConstructorTestingTNewMockUsecasesRepositories) *MockUsecasesRepositories {
	mock := &MockUsecasesRepositories{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
