// Code generated by mockery v2.26.1. DO NOT EDIT.

package usecase

import mock "github.com/stretchr/testify/mock"

// MockViperRepository is an autogenerated mock type for the ViperRepository type
type MockViperRepository struct {
	mock.Mock
}

type MockViperRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockViperRepository) EXPECT() *MockViperRepository_Expecter {
	return &MockViperRepository_Expecter{mock: &_m.Mock}
}

// GetToken provides a mock function with given fields:
func (_m *MockViperRepository) GetToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockViperRepository_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type MockViperRepository_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
func (_e *MockViperRepository_Expecter) GetToken() *MockViperRepository_GetToken_Call {
	return &MockViperRepository_GetToken_Call{Call: _e.mock.On("GetToken")}
}

func (_c *MockViperRepository_GetToken_Call) Run(run func()) *MockViperRepository_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockViperRepository_GetToken_Call) Return(_a0 string) *MockViperRepository_GetToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockViperRepository_GetToken_Call) RunAndReturn(run func() string) *MockViperRepository_GetToken_Call {
	_c.Call.Return(run)
	return _c
}

// IsWriteConfigError provides a mock function with given fields: err
func (_m *MockViperRepository) IsWriteConfigError(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockViperRepository_IsWriteConfigError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsWriteConfigError'
type MockViperRepository_IsWriteConfigError_Call struct {
	*mock.Call
}

// IsWriteConfigError is a helper method to define mock.On call
//   - err error
func (_e *MockViperRepository_Expecter) IsWriteConfigError(err interface{}) *MockViperRepository_IsWriteConfigError_Call {
	return &MockViperRepository_IsWriteConfigError_Call{Call: _e.mock.On("IsWriteConfigError", err)}
}

func (_c *MockViperRepository_IsWriteConfigError_Call) Run(run func(err error)) *MockViperRepository_IsWriteConfigError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockViperRepository_IsWriteConfigError_Call) Return(_a0 bool) *MockViperRepository_IsWriteConfigError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockViperRepository_IsWriteConfigError_Call) RunAndReturn(run func(error) bool) *MockViperRepository_IsWriteConfigError_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogin provides a mock function with given fields: login
func (_m *MockViperRepository) SetLogin(login string) error {
	ret := _m.Called(login)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(login)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockViperRepository_SetLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogin'
type MockViperRepository_SetLogin_Call struct {
	*mock.Call
}

// SetLogin is a helper method to define mock.On call
//   - login string
func (_e *MockViperRepository_Expecter) SetLogin(login interface{}) *MockViperRepository_SetLogin_Call {
	return &MockViperRepository_SetLogin_Call{Call: _e.mock.On("SetLogin", login)}
}

func (_c *MockViperRepository_SetLogin_Call) Run(run func(login string)) *MockViperRepository_SetLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockViperRepository_SetLogin_Call) Return(_a0 error) *MockViperRepository_SetLogin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockViperRepository_SetLogin_Call) RunAndReturn(run func(string) error) *MockViperRepository_SetLogin_Call {
	_c.Call.Return(run)
	return _c
}

// SetToken provides a mock function with given fields: token
func (_m *MockViperRepository) SetToken(token string) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockViperRepository_SetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetToken'
type MockViperRepository_SetToken_Call struct {
	*mock.Call
}

// SetToken is a helper method to define mock.On call
//   - token string
func (_e *MockViperRepository_Expecter) SetToken(token interface{}) *MockViperRepository_SetToken_Call {
	return &MockViperRepository_SetToken_Call{Call: _e.mock.On("SetToken", token)}
}

func (_c *MockViperRepository_SetToken_Call) Run(run func(token string)) *MockViperRepository_SetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockViperRepository_SetToken_Call) Return(_a0 error) *MockViperRepository_SetToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockViperRepository_SetToken_Call) RunAndReturn(run func(string) error) *MockViperRepository_SetToken_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockViperRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockViperRepository creates a new instance of MockViperRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockViperRepository(t mockConstructorTestingTNewMockViperRepository) *MockViperRepository {
	mock := &MockViperRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
