// Code generated by mockery v2.26.1. DO NOT EDIT.

package command

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockSyncUsecase is an autogenerated mock type for the SyncUsecase type
type MockSyncUsecase struct {
	mock.Mock
}

type MockSyncUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSyncUsecase) EXPECT() *MockSyncUsecase_Expecter {
	return &MockSyncUsecase_Expecter{mock: &_m.Mock}
}

// ExtractUserError provides a mock function with given fields: err
func (_m *MockSyncUsecase) ExtractUserError(err error) error {
	ret := _m.Called(err)

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncUsecase_ExtractUserError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractUserError'
type MockSyncUsecase_ExtractUserError_Call struct {
	*mock.Call
}

// ExtractUserError is a helper method to define mock.On call
//   - err error
func (_e *MockSyncUsecase_Expecter) ExtractUserError(err interface{}) *MockSyncUsecase_ExtractUserError_Call {
	return &MockSyncUsecase_ExtractUserError_Call{Call: _e.mock.On("ExtractUserError", err)}
}

func (_c *MockSyncUsecase_ExtractUserError_Call) Run(run func(err error)) *MockSyncUsecase_ExtractUserError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockSyncUsecase_ExtractUserError_Call) Return(_a0 error) *MockSyncUsecase_ExtractUserError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncUsecase_ExtractUserError_Call) RunAndReturn(run func(error) error) *MockSyncUsecase_ExtractUserError_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with given fields: ctx, statusOutput
func (_m *MockSyncUsecase) Sync(ctx context.Context, statusOutput io.Writer) error {
	ret := _m.Called(ctx, statusOutput)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Writer) error); ok {
		r0 = rf(ctx, statusOutput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncUsecase_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type MockSyncUsecase_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - ctx context.Context
//   - statusOutput io.Writer
func (_e *MockSyncUsecase_Expecter) Sync(ctx interface{}, statusOutput interface{}) *MockSyncUsecase_Sync_Call {
	return &MockSyncUsecase_Sync_Call{Call: _e.mock.On("Sync", ctx, statusOutput)}
}

func (_c *MockSyncUsecase_Sync_Call) Run(run func(ctx context.Context, statusOutput io.Writer)) *MockSyncUsecase_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Writer))
	})
	return _c
}

func (_c *MockSyncUsecase_Sync_Call) Return(_a0 error) *MockSyncUsecase_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncUsecase_Sync_Call) RunAndReturn(run func(context.Context, io.Writer) error) *MockSyncUsecase_Sync_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockSyncUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSyncUsecase creates a new instance of MockSyncUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSyncUsecase(t mockConstructorTestingTNewMockSyncUsecase) *MockSyncUsecase {
	mock := &MockSyncUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
