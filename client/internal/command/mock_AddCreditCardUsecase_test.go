// Code generated by mockery v2.26.1. DO NOT EDIT.

package command

import (
	context "context"

	models "github.com/Puena/password-keeper/client/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockAddCreditCardUsecase is an autogenerated mock type for the AddCreditCardUsecase type
type MockAddCreditCardUsecase struct {
	mock.Mock
}

type MockAddCreditCardUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAddCreditCardUsecase) EXPECT() *MockAddCreditCardUsecase_Expecter {
	return &MockAddCreditCardUsecase_Expecter{mock: &_m.Mock}
}

// AddCard provides a mock function with given fields: ctx, name, card, lockPassword
func (_m *MockAddCreditCardUsecase) AddCard(ctx context.Context, name string, card *models.Card, lockPassword string) error {
	ret := _m.Called(ctx, name, card, lockPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Card, string) error); ok {
		r0 = rf(ctx, name, card, lockPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAddCreditCardUsecase_AddCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCard'
type MockAddCreditCardUsecase_AddCard_Call struct {
	*mock.Call
}

// AddCard is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - card *models.Card
//   - lockPassword string
func (_e *MockAddCreditCardUsecase_Expecter) AddCard(ctx interface{}, name interface{}, card interface{}, lockPassword interface{}) *MockAddCreditCardUsecase_AddCard_Call {
	return &MockAddCreditCardUsecase_AddCard_Call{Call: _e.mock.On("AddCard", ctx, name, card, lockPassword)}
}

func (_c *MockAddCreditCardUsecase_AddCard_Call) Run(run func(ctx context.Context, name string, card *models.Card, lockPassword string)) *MockAddCreditCardUsecase_AddCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*models.Card), args[3].(string))
	})
	return _c
}

func (_c *MockAddCreditCardUsecase_AddCard_Call) Return(_a0 error) *MockAddCreditCardUsecase_AddCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddCreditCardUsecase_AddCard_Call) RunAndReturn(run func(context.Context, string, *models.Card, string) error) *MockAddCreditCardUsecase_AddCard_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractUserError provides a mock function with given fields: err
func (_m *MockAddCreditCardUsecase) ExtractUserError(err error) error {
	ret := _m.Called(err)

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAddCreditCardUsecase_ExtractUserError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractUserError'
type MockAddCreditCardUsecase_ExtractUserError_Call struct {
	*mock.Call
}

// ExtractUserError is a helper method to define mock.On call
//   - err error
func (_e *MockAddCreditCardUsecase_Expecter) ExtractUserError(err interface{}) *MockAddCreditCardUsecase_ExtractUserError_Call {
	return &MockAddCreditCardUsecase_ExtractUserError_Call{Call: _e.mock.On("ExtractUserError", err)}
}

func (_c *MockAddCreditCardUsecase_ExtractUserError_Call) Run(run func(err error)) *MockAddCreditCardUsecase_ExtractUserError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockAddCreditCardUsecase_ExtractUserError_Call) Return(_a0 error) *MockAddCreditCardUsecase_ExtractUserError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddCreditCardUsecase_ExtractUserError_Call) RunAndReturn(run func(error) error) *MockAddCreditCardUsecase_ExtractUserError_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAddCreditCardUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAddCreditCardUsecase creates a new instance of MockAddCreditCardUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAddCreditCardUsecase(t mockConstructorTestingTNewMockAddCreditCardUsecase) *MockAddCreditCardUsecase {
	mock := &MockAddCreditCardUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
