// Code generated by mockery v2.26.1. DO NOT EDIT.

package command

import (
	context "context"

	models "github.com/Puena/password-keeper/client/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockAddUsecases is an autogenerated mock type for the AddUsecases type
type MockAddUsecases struct {
	mock.Mock
}

type MockAddUsecases_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAddUsecases) EXPECT() *MockAddUsecases_Expecter {
	return &MockAddUsecases_Expecter{mock: &_m.Mock}
}

// AddCard provides a mock function with given fields: ctx, name, card, lockPassword
func (_m *MockAddUsecases) AddCard(ctx context.Context, name string, card *models.Card, lockPassword string) error {
	ret := _m.Called(ctx, name, card, lockPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Card, string) error); ok {
		r0 = rf(ctx, name, card, lockPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAddUsecases_AddCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCard'
type MockAddUsecases_AddCard_Call struct {
	*mock.Call
}

// AddCard is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - card *models.Card
//   - lockPassword string
func (_e *MockAddUsecases_Expecter) AddCard(ctx interface{}, name interface{}, card interface{}, lockPassword interface{}) *MockAddUsecases_AddCard_Call {
	return &MockAddUsecases_AddCard_Call{Call: _e.mock.On("AddCard", ctx, name, card, lockPassword)}
}

func (_c *MockAddUsecases_AddCard_Call) Run(run func(ctx context.Context, name string, card *models.Card, lockPassword string)) *MockAddUsecases_AddCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*models.Card), args[3].(string))
	})
	return _c
}

func (_c *MockAddUsecases_AddCard_Call) Return(_a0 error) *MockAddUsecases_AddCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddUsecases_AddCard_Call) RunAndReturn(run func(context.Context, string, *models.Card, string) error) *MockAddUsecases_AddCard_Call {
	_c.Call.Return(run)
	return _c
}

// AddFile provides a mock function with given fields: ctx, name, data, lockPassword
func (_m *MockAddUsecases) AddFile(ctx context.Context, name string, data []byte, lockPassword string) error {
	ret := _m.Called(ctx, name, data, lockPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, string) error); ok {
		r0 = rf(ctx, name, data, lockPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAddUsecases_AddFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFile'
type MockAddUsecases_AddFile_Call struct {
	*mock.Call
}

// AddFile is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - data []byte
//   - lockPassword string
func (_e *MockAddUsecases_Expecter) AddFile(ctx interface{}, name interface{}, data interface{}, lockPassword interface{}) *MockAddUsecases_AddFile_Call {
	return &MockAddUsecases_AddFile_Call{Call: _e.mock.On("AddFile", ctx, name, data, lockPassword)}
}

func (_c *MockAddUsecases_AddFile_Call) Run(run func(ctx context.Context, name string, data []byte, lockPassword string)) *MockAddUsecases_AddFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte), args[3].(string))
	})
	return _c
}

func (_c *MockAddUsecases_AddFile_Call) Return(_a0 error) *MockAddUsecases_AddFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddUsecases_AddFile_Call) RunAndReturn(run func(context.Context, string, []byte, string) error) *MockAddUsecases_AddFile_Call {
	_c.Call.Return(run)
	return _c
}

// AddPassword provides a mock function with given fields: ctx, name, passowrd, lockPassword
func (_m *MockAddUsecases) AddPassword(ctx context.Context, name string, passowrd string, lockPassword string) error {
	ret := _m.Called(ctx, name, passowrd, lockPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, name, passowrd, lockPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAddUsecases_AddPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPassword'
type MockAddUsecases_AddPassword_Call struct {
	*mock.Call
}

// AddPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - passowrd string
//   - lockPassword string
func (_e *MockAddUsecases_Expecter) AddPassword(ctx interface{}, name interface{}, passowrd interface{}, lockPassword interface{}) *MockAddUsecases_AddPassword_Call {
	return &MockAddUsecases_AddPassword_Call{Call: _e.mock.On("AddPassword", ctx, name, passowrd, lockPassword)}
}

func (_c *MockAddUsecases_AddPassword_Call) Run(run func(ctx context.Context, name string, passowrd string, lockPassword string)) *MockAddUsecases_AddPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockAddUsecases_AddPassword_Call) Return(_a0 error) *MockAddUsecases_AddPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddUsecases_AddPassword_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockAddUsecases_AddPassword_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractUserError provides a mock function with given fields: err
func (_m *MockAddUsecases) ExtractUserError(err error) error {
	ret := _m.Called(err)

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAddUsecases_ExtractUserError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractUserError'
type MockAddUsecases_ExtractUserError_Call struct {
	*mock.Call
}

// ExtractUserError is a helper method to define mock.On call
//   - err error
func (_e *MockAddUsecases_Expecter) ExtractUserError(err interface{}) *MockAddUsecases_ExtractUserError_Call {
	return &MockAddUsecases_ExtractUserError_Call{Call: _e.mock.On("ExtractUserError", err)}
}

func (_c *MockAddUsecases_ExtractUserError_Call) Run(run func(err error)) *MockAddUsecases_ExtractUserError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockAddUsecases_ExtractUserError_Call) Return(_a0 error) *MockAddUsecases_ExtractUserError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAddUsecases_ExtractUserError_Call) RunAndReturn(run func(error) error) *MockAddUsecases_ExtractUserError_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function with given fields: ctx, path
func (_m *MockAddUsecases) ReadFile(ctx context.Context, path string) ([]byte, error) {
	ret := _m.Called(ctx, path)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddUsecases_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type MockAddUsecases_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockAddUsecases_Expecter) ReadFile(ctx interface{}, path interface{}) *MockAddUsecases_ReadFile_Call {
	return &MockAddUsecases_ReadFile_Call{Call: _e.mock.On("ReadFile", ctx, path)}
}

func (_c *MockAddUsecases_ReadFile_Call) Run(run func(ctx context.Context, path string)) *MockAddUsecases_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAddUsecases_ReadFile_Call) Return(_a0 []byte, _a1 error) *MockAddUsecases_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddUsecases_ReadFile_Call) RunAndReturn(run func(context.Context, string) ([]byte, error)) *MockAddUsecases_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAddUsecases interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAddUsecases creates a new instance of MockAddUsecases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAddUsecases(t mockConstructorTestingTNewMockAddUsecases) *MockAddUsecases {
	mock := &MockAddUsecases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
