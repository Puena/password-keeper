// Code generated by mockery v2.26.1. DO NOT EDIT.

package command

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEditPassowrdUsecase is an autogenerated mock type for the EditPassowrdUsecase type
type MockEditPassowrdUsecase struct {
	mock.Mock
}

type MockEditPassowrdUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEditPassowrdUsecase) EXPECT() *MockEditPassowrdUsecase_Expecter {
	return &MockEditPassowrdUsecase_Expecter{mock: &_m.Mock}
}

// EditPassword provides a mock function with given fields: ctx, name, newName, newPassword, lockPassword
func (_m *MockEditPassowrdUsecase) EditPassword(ctx context.Context, name string, newName string, newPassword string, lockPassword string) error {
	ret := _m.Called(ctx, name, newName, newPassword, lockPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, name, newName, newPassword, lockPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEditPassowrdUsecase_EditPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditPassword'
type MockEditPassowrdUsecase_EditPassword_Call struct {
	*mock.Call
}

// EditPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - newName string
//   - newPassword string
//   - lockPassword string
func (_e *MockEditPassowrdUsecase_Expecter) EditPassword(ctx interface{}, name interface{}, newName interface{}, newPassword interface{}, lockPassword interface{}) *MockEditPassowrdUsecase_EditPassword_Call {
	return &MockEditPassowrdUsecase_EditPassword_Call{Call: _e.mock.On("EditPassword", ctx, name, newName, newPassword, lockPassword)}
}

func (_c *MockEditPassowrdUsecase_EditPassword_Call) Run(run func(ctx context.Context, name string, newName string, newPassword string, lockPassword string)) *MockEditPassowrdUsecase_EditPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockEditPassowrdUsecase_EditPassword_Call) Return(_a0 error) *MockEditPassowrdUsecase_EditPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEditPassowrdUsecase_EditPassword_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockEditPassowrdUsecase_EditPassword_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractUserError provides a mock function with given fields: err
func (_m *MockEditPassowrdUsecase) ExtractUserError(err error) error {
	ret := _m.Called(err)

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEditPassowrdUsecase_ExtractUserError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractUserError'
type MockEditPassowrdUsecase_ExtractUserError_Call struct {
	*mock.Call
}

// ExtractUserError is a helper method to define mock.On call
//   - err error
func (_e *MockEditPassowrdUsecase_Expecter) ExtractUserError(err interface{}) *MockEditPassowrdUsecase_ExtractUserError_Call {
	return &MockEditPassowrdUsecase_ExtractUserError_Call{Call: _e.mock.On("ExtractUserError", err)}
}

func (_c *MockEditPassowrdUsecase_ExtractUserError_Call) Run(run func(err error)) *MockEditPassowrdUsecase_ExtractUserError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockEditPassowrdUsecase_ExtractUserError_Call) Return(_a0 error) *MockEditPassowrdUsecase_ExtractUserError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEditPassowrdUsecase_ExtractUserError_Call) RunAndReturn(run func(error) error) *MockEditPassowrdUsecase_ExtractUserError_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockEditPassowrdUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEditPassowrdUsecase creates a new instance of MockEditPassowrdUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEditPassowrdUsecase(t mockConstructorTestingTNewMockEditPassowrdUsecase) *MockEditPassowrdUsecase {
	mock := &MockEditPassowrdUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
