// Code generated by mockery v2.26.1. DO NOT EDIT.

package command

import (
	context "context"

	models "github.com/Puena/password-keeper/client/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockEditUsecases is an autogenerated mock type for the EditUsecases type
type MockEditUsecases struct {
	mock.Mock
}

type MockEditUsecases_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEditUsecases) EXPECT() *MockEditUsecases_Expecter {
	return &MockEditUsecases_Expecter{mock: &_m.Mock}
}

// EditCard provides a mock function with given fields: ctx, name, newName, newCard, lockPassword
func (_m *MockEditUsecases) EditCard(ctx context.Context, name string, newName string, newCard *models.Card, lockPassword string) error {
	ret := _m.Called(ctx, name, newName, newCard, lockPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *models.Card, string) error); ok {
		r0 = rf(ctx, name, newName, newCard, lockPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEditUsecases_EditCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditCard'
type MockEditUsecases_EditCard_Call struct {
	*mock.Call
}

// EditCard is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - newName string
//   - newCard *models.Card
//   - lockPassword string
func (_e *MockEditUsecases_Expecter) EditCard(ctx interface{}, name interface{}, newName interface{}, newCard interface{}, lockPassword interface{}) *MockEditUsecases_EditCard_Call {
	return &MockEditUsecases_EditCard_Call{Call: _e.mock.On("EditCard", ctx, name, newName, newCard, lockPassword)}
}

func (_c *MockEditUsecases_EditCard_Call) Run(run func(ctx context.Context, name string, newName string, newCard *models.Card, lockPassword string)) *MockEditUsecases_EditCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*models.Card), args[4].(string))
	})
	return _c
}

func (_c *MockEditUsecases_EditCard_Call) Return(_a0 error) *MockEditUsecases_EditCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEditUsecases_EditCard_Call) RunAndReturn(run func(context.Context, string, string, *models.Card, string) error) *MockEditUsecases_EditCard_Call {
	_c.Call.Return(run)
	return _c
}

// EditFile provides a mock function with given fields: ctx, name, newName, newData, lockPassword
func (_m *MockEditUsecases) EditFile(ctx context.Context, name string, newName string, newData []byte, lockPassword string) error {
	ret := _m.Called(ctx, name, newName, newData, lockPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, string) error); ok {
		r0 = rf(ctx, name, newName, newData, lockPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEditUsecases_EditFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditFile'
type MockEditUsecases_EditFile_Call struct {
	*mock.Call
}

// EditFile is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - newName string
//   - newData []byte
//   - lockPassword string
func (_e *MockEditUsecases_Expecter) EditFile(ctx interface{}, name interface{}, newName interface{}, newData interface{}, lockPassword interface{}) *MockEditUsecases_EditFile_Call {
	return &MockEditUsecases_EditFile_Call{Call: _e.mock.On("EditFile", ctx, name, newName, newData, lockPassword)}
}

func (_c *MockEditUsecases_EditFile_Call) Run(run func(ctx context.Context, name string, newName string, newData []byte, lockPassword string)) *MockEditUsecases_EditFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]byte), args[4].(string))
	})
	return _c
}

func (_c *MockEditUsecases_EditFile_Call) Return(_a0 error) *MockEditUsecases_EditFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEditUsecases_EditFile_Call) RunAndReturn(run func(context.Context, string, string, []byte, string) error) *MockEditUsecases_EditFile_Call {
	_c.Call.Return(run)
	return _c
}

// EditPassword provides a mock function with given fields: ctx, name, newName, newPassword, lockPassword
func (_m *MockEditUsecases) EditPassword(ctx context.Context, name string, newName string, newPassword string, lockPassword string) error {
	ret := _m.Called(ctx, name, newName, newPassword, lockPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, name, newName, newPassword, lockPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEditUsecases_EditPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditPassword'
type MockEditUsecases_EditPassword_Call struct {
	*mock.Call
}

// EditPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - newName string
//   - newPassword string
//   - lockPassword string
func (_e *MockEditUsecases_Expecter) EditPassword(ctx interface{}, name interface{}, newName interface{}, newPassword interface{}, lockPassword interface{}) *MockEditUsecases_EditPassword_Call {
	return &MockEditUsecases_EditPassword_Call{Call: _e.mock.On("EditPassword", ctx, name, newName, newPassword, lockPassword)}
}

func (_c *MockEditUsecases_EditPassword_Call) Run(run func(ctx context.Context, name string, newName string, newPassword string, lockPassword string)) *MockEditUsecases_EditPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockEditUsecases_EditPassword_Call) Return(_a0 error) *MockEditUsecases_EditPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEditUsecases_EditPassword_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockEditUsecases_EditPassword_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractUserError provides a mock function with given fields: err
func (_m *MockEditUsecases) ExtractUserError(err error) error {
	ret := _m.Called(err)

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEditUsecases_ExtractUserError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractUserError'
type MockEditUsecases_ExtractUserError_Call struct {
	*mock.Call
}

// ExtractUserError is a helper method to define mock.On call
//   - err error
func (_e *MockEditUsecases_Expecter) ExtractUserError(err interface{}) *MockEditUsecases_ExtractUserError_Call {
	return &MockEditUsecases_ExtractUserError_Call{Call: _e.mock.On("ExtractUserError", err)}
}

func (_c *MockEditUsecases_ExtractUserError_Call) Run(run func(err error)) *MockEditUsecases_ExtractUserError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockEditUsecases_ExtractUserError_Call) Return(_a0 error) *MockEditUsecases_ExtractUserError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEditUsecases_ExtractUserError_Call) RunAndReturn(run func(error) error) *MockEditUsecases_ExtractUserError_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function with given fields: ctx, path
func (_m *MockEditUsecases) ReadFile(ctx context.Context, path string) ([]byte, error) {
	ret := _m.Called(ctx, path)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEditUsecases_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type MockEditUsecases_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockEditUsecases_Expecter) ReadFile(ctx interface{}, path interface{}) *MockEditUsecases_ReadFile_Call {
	return &MockEditUsecases_ReadFile_Call{Call: _e.mock.On("ReadFile", ctx, path)}
}

func (_c *MockEditUsecases_ReadFile_Call) Run(run func(ctx context.Context, path string)) *MockEditUsecases_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEditUsecases_ReadFile_Call) Return(_a0 []byte, _a1 error) *MockEditUsecases_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEditUsecases_ReadFile_Call) RunAndReturn(run func(context.Context, string) ([]byte, error)) *MockEditUsecases_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockEditUsecases interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockEditUsecases creates a new instance of MockEditUsecases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockEditUsecases(t mockConstructorTestingTNewMockEditUsecases) *MockEditUsecases {
	mock := &MockEditUsecases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
