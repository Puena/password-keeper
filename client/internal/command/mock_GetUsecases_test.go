// Code generated by mockery v2.26.1. DO NOT EDIT.

package command

import (
	context "context"

	models "github.com/Puena/password-keeper/client/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockGetUsecases is an autogenerated mock type for the GetUsecases type
type MockGetUsecases struct {
	mock.Mock
}

type MockGetUsecases_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetUsecases) EXPECT() *MockGetUsecases_Expecter {
	return &MockGetUsecases_Expecter{mock: &_m.Mock}
}

// ExtractUserError provides a mock function with given fields: err
func (_m *MockGetUsecases) ExtractUserError(err error) error {
	ret := _m.Called(err)

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGetUsecases_ExtractUserError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractUserError'
type MockGetUsecases_ExtractUserError_Call struct {
	*mock.Call
}

// ExtractUserError is a helper method to define mock.On call
//   - err error
func (_e *MockGetUsecases_Expecter) ExtractUserError(err interface{}) *MockGetUsecases_ExtractUserError_Call {
	return &MockGetUsecases_ExtractUserError_Call{Call: _e.mock.On("ExtractUserError", err)}
}

func (_c *MockGetUsecases_ExtractUserError_Call) Run(run func(err error)) *MockGetUsecases_ExtractUserError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockGetUsecases_ExtractUserError_Call) Return(_a0 error) *MockGetUsecases_ExtractUserError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGetUsecases_ExtractUserError_Call) RunAndReturn(run func(error) error) *MockGetUsecases_ExtractUserError_Call {
	_c.Call.Return(run)
	return _c
}

// GetCardByName provides a mock function with given fields: ctx, name, lockPassword
func (_m *MockGetUsecases) GetCardByName(ctx context.Context, name string, lockPassword string) (*models.Card, error) {
	ret := _m.Called(ctx, name, lockPassword)

	var r0 *models.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Card, error)); ok {
		return rf(ctx, name, lockPassword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Card); ok {
		r0 = rf(ctx, name, lockPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, lockPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetUsecases_GetCardByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCardByName'
type MockGetUsecases_GetCardByName_Call struct {
	*mock.Call
}

// GetCardByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - lockPassword string
func (_e *MockGetUsecases_Expecter) GetCardByName(ctx interface{}, name interface{}, lockPassword interface{}) *MockGetUsecases_GetCardByName_Call {
	return &MockGetUsecases_GetCardByName_Call{Call: _e.mock.On("GetCardByName", ctx, name, lockPassword)}
}

func (_c *MockGetUsecases_GetCardByName_Call) Run(run func(ctx context.Context, name string, lockPassword string)) *MockGetUsecases_GetCardByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGetUsecases_GetCardByName_Call) Return(_a0 *models.Card, _a1 error) *MockGetUsecases_GetCardByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetUsecases_GetCardByName_Call) RunAndReturn(run func(context.Context, string, string) (*models.Card, error)) *MockGetUsecases_GetCardByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileByName provides a mock function with given fields: ctx, name, lockPassword
func (_m *MockGetUsecases) GetFileByName(ctx context.Context, name string, lockPassword string) ([]byte, error) {
	ret := _m.Called(ctx, name, lockPassword)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, name, lockPassword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, name, lockPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, lockPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetUsecases_GetFileByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileByName'
type MockGetUsecases_GetFileByName_Call struct {
	*mock.Call
}

// GetFileByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - lockPassword string
func (_e *MockGetUsecases_Expecter) GetFileByName(ctx interface{}, name interface{}, lockPassword interface{}) *MockGetUsecases_GetFileByName_Call {
	return &MockGetUsecases_GetFileByName_Call{Call: _e.mock.On("GetFileByName", ctx, name, lockPassword)}
}

func (_c *MockGetUsecases_GetFileByName_Call) Run(run func(ctx context.Context, name string, lockPassword string)) *MockGetUsecases_GetFileByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGetUsecases_GetFileByName_Call) Return(_a0 []byte, _a1 error) *MockGetUsecases_GetFileByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetUsecases_GetFileByName_Call) RunAndReturn(run func(context.Context, string, string) ([]byte, error)) *MockGetUsecases_GetFileByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetPasswordByName provides a mock function with given fields: ctx, name, lockPassword
func (_m *MockGetUsecases) GetPasswordByName(ctx context.Context, name string, lockPassword string) (string, error) {
	ret := _m.Called(ctx, name, lockPassword)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, name, lockPassword)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, name, lockPassword)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, lockPassword)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetUsecases_GetPasswordByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPasswordByName'
type MockGetUsecases_GetPasswordByName_Call struct {
	*mock.Call
}

// GetPasswordByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - lockPassword string
func (_e *MockGetUsecases_Expecter) GetPasswordByName(ctx interface{}, name interface{}, lockPassword interface{}) *MockGetUsecases_GetPasswordByName_Call {
	return &MockGetUsecases_GetPasswordByName_Call{Call: _e.mock.On("GetPasswordByName", ctx, name, lockPassword)}
}

func (_c *MockGetUsecases_GetPasswordByName_Call) Run(run func(ctx context.Context, name string, lockPassword string)) *MockGetUsecases_GetPasswordByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGetUsecases_GetPasswordByName_Call) Return(_a0 string, _a1 error) *MockGetUsecases_GetPasswordByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetUsecases_GetPasswordByName_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *MockGetUsecases_GetPasswordByName_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function with given fields: ctx, path, data
func (_m *MockGetUsecases) WriteFile(ctx context.Context, path string, data []byte) error {
	ret := _m.Called(ctx, path, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, path, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGetUsecases_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type MockGetUsecases_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - data []byte
func (_e *MockGetUsecases_Expecter) WriteFile(ctx interface{}, path interface{}, data interface{}) *MockGetUsecases_WriteFile_Call {
	return &MockGetUsecases_WriteFile_Call{Call: _e.mock.On("WriteFile", ctx, path, data)}
}

func (_c *MockGetUsecases_WriteFile_Call) Run(run func(ctx context.Context, path string, data []byte)) *MockGetUsecases_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockGetUsecases_WriteFile_Call) Return(_a0 error) *MockGetUsecases_WriteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGetUsecases_WriteFile_Call) RunAndReturn(run func(context.Context, string, []byte) error) *MockGetUsecases_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockGetUsecases interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockGetUsecases creates a new instance of MockGetUsecases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockGetUsecases(t mockConstructorTestingTNewMockGetUsecases) *MockGetUsecases {
	mock := &MockGetUsecases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
