// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: keeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Keeper_SignUp_FullMethodName       = "/keeper.Keeper/SignUp"
	Keeper_SignIn_FullMethodName       = "/keeper.Keeper/SignIn"
	Keeper_GetChestByID_FullMethodName = "/keeper.Keeper/GetChestByID"
	Keeper_AddChest_FullMethodName     = "/keeper.Keeper/AddChest"
	Keeper_UpdateChest_FullMethodName  = "/keeper.Keeper/UpdateChest"
	Keeper_DeleteChest_FullMethodName  = "/keeper.Keeper/DeleteChest"
	Keeper_Sync_FullMethodName         = "/keeper.Keeper/Sync"
)

// KeeperClient is the client API for Keeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeeperClient interface {
	// Handler for doing user registration.
	SignUp(ctx context.Context, in *AuthDataRequest, opts ...grpc.CallOption) (*AuthTokenResponse, error)
	// Handler for doing user authentification.
	SignIn(ctx context.Context, in *AuthDataRequest, opts ...grpc.CallOption) (*AuthTokenResponse, error)
	// Handler for getting chest by id.
	GetChestByID(ctx context.Context, in *ChestIDRequest, opts ...grpc.CallOption) (*ChestResponse, error)
	// Handler for adding chest data.
	AddChest(ctx context.Context, in *ChestRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	// Handler for updating chest.
	UpdateChest(ctx context.Context, in *ChestRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	// Handler for deleting chest.
	DeleteChest(ctx context.Context, in *DeleteChestRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	// Handler for syncing history and data.
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type keeperClient struct {
	cc grpc.ClientConnInterface
}

func NewKeeperClient(cc grpc.ClientConnInterface) KeeperClient {
	return &keeperClient{cc}
}

func (c *keeperClient) SignUp(ctx context.Context, in *AuthDataRequest, opts ...grpc.CallOption) (*AuthTokenResponse, error) {
	out := new(AuthTokenResponse)
	err := c.cc.Invoke(ctx, Keeper_SignUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) SignIn(ctx context.Context, in *AuthDataRequest, opts ...grpc.CallOption) (*AuthTokenResponse, error) {
	out := new(AuthTokenResponse)
	err := c.cc.Invoke(ctx, Keeper_SignIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) GetChestByID(ctx context.Context, in *ChestIDRequest, opts ...grpc.CallOption) (*ChestResponse, error) {
	out := new(ChestResponse)
	err := c.cc.Invoke(ctx, Keeper_GetChestByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) AddChest(ctx context.Context, in *ChestRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, Keeper_AddChest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) UpdateChest(ctx context.Context, in *ChestRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, Keeper_UpdateChest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) DeleteChest(ctx context.Context, in *DeleteChestRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, Keeper_DeleteChest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeperClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, Keeper_Sync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeeperServer is the server API for Keeper service.
// All implementations must embed UnimplementedKeeperServer
// for forward compatibility
type KeeperServer interface {
	// Handler for doing user registration.
	SignUp(context.Context, *AuthDataRequest) (*AuthTokenResponse, error)
	// Handler for doing user authentification.
	SignIn(context.Context, *AuthDataRequest) (*AuthTokenResponse, error)
	// Handler for getting chest by id.
	GetChestByID(context.Context, *ChestIDRequest) (*ChestResponse, error)
	// Handler for adding chest data.
	AddChest(context.Context, *ChestRequest) (*HistoryResponse, error)
	// Handler for updating chest.
	UpdateChest(context.Context, *ChestRequest) (*HistoryResponse, error)
	// Handler for deleting chest.
	DeleteChest(context.Context, *DeleteChestRequest) (*HistoryResponse, error)
	// Handler for syncing history and data.
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	mustEmbedUnimplementedKeeperServer()
}

// UnimplementedKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedKeeperServer struct {
}

func (UnimplementedKeeperServer) SignUp(context.Context, *AuthDataRequest) (*AuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedKeeperServer) SignIn(context.Context, *AuthDataRequest) (*AuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedKeeperServer) GetChestByID(context.Context, *ChestIDRequest) (*ChestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChestByID not implemented")
}
func (UnimplementedKeeperServer) AddChest(context.Context, *ChestRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChest not implemented")
}
func (UnimplementedKeeperServer) UpdateChest(context.Context, *ChestRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChest not implemented")
}
func (UnimplementedKeeperServer) DeleteChest(context.Context, *DeleteChestRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChest not implemented")
}
func (UnimplementedKeeperServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedKeeperServer) mustEmbedUnimplementedKeeperServer() {}

// UnsafeKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeeperServer will
// result in compilation errors.
type UnsafeKeeperServer interface {
	mustEmbedUnimplementedKeeperServer()
}

func RegisterKeeperServer(s grpc.ServiceRegistrar, srv KeeperServer) {
	s.RegisterService(&Keeper_ServiceDesc, srv)
}

func _Keeper_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_SignUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).SignUp(ctx, req.(*AuthDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).SignIn(ctx, req.(*AuthDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_GetChestByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChestIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).GetChestByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_GetChestByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).GetChestByID(ctx, req.(*ChestIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_AddChest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).AddChest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_AddChest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).AddChest(ctx, req.(*ChestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_UpdateChest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).UpdateChest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_UpdateChest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).UpdateChest(ctx, req.(*ChestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_DeleteChest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).DeleteChest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_DeleteChest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).DeleteChest(ctx, req.(*DeleteChestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeper_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeeperServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Keeper_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeeperServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Keeper_ServiceDesc is the grpc.ServiceDesc for Keeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Keeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keeper.Keeper",
	HandlerType: (*KeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _Keeper_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _Keeper_SignIn_Handler,
		},
		{
			MethodName: "GetChestByID",
			Handler:    _Keeper_GetChestByID_Handler,
		},
		{
			MethodName: "AddChest",
			Handler:    _Keeper_AddChest_Handler,
		},
		{
			MethodName: "UpdateChest",
			Handler:    _Keeper_UpdateChest_Handler,
		},
		{
			MethodName: "DeleteChest",
			Handler:    _Keeper_DeleteChest_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Keeper_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keeper.proto",
}
