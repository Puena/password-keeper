// Code generated by mockery v2.26.1. DO NOT EDIT.

package services

import (
	context "context"

	dto "github.com/Puena/password-keeper/server/internal/dto"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockKeeperUseCases is an autogenerated mock type for the KeeperUseCases type
type MockKeeperUseCases struct {
	mock.Mock
}

type MockKeeperUseCases_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeeperUseCases) EXPECT() *MockKeeperUseCases_Expecter {
	return &MockKeeperUseCases_Expecter{mock: &_m.Mock}
}

// AddChest provides a mock function with given fields: ctx, chest, history
func (_m *MockKeeperUseCases) AddChest(ctx context.Context, chest *dto.Chest, history *dto.History) (*dto.History, error) {
	ret := _m.Called(ctx, chest, history)

	var r0 *dto.History
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Chest, *dto.History) (*dto.History, error)); ok {
		return rf(ctx, chest, history)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Chest, *dto.History) *dto.History); ok {
		r0 = rf(ctx, chest, history)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.History)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.Chest, *dto.History) error); ok {
		r1 = rf(ctx, chest, history)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperUseCases_AddChest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddChest'
type MockKeeperUseCases_AddChest_Call struct {
	*mock.Call
}

// AddChest is a helper method to define mock.On call
//   - ctx context.Context
//   - chest *dto.Chest
//   - history *dto.History
func (_e *MockKeeperUseCases_Expecter) AddChest(ctx interface{}, chest interface{}, history interface{}) *MockKeeperUseCases_AddChest_Call {
	return &MockKeeperUseCases_AddChest_Call{Call: _e.mock.On("AddChest", ctx, chest, history)}
}

func (_c *MockKeeperUseCases_AddChest_Call) Run(run func(ctx context.Context, chest *dto.Chest, history *dto.History)) *MockKeeperUseCases_AddChest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.Chest), args[2].(*dto.History))
	})
	return _c
}

func (_c *MockKeeperUseCases_AddChest_Call) Return(_a0 *dto.History, _a1 error) *MockKeeperUseCases_AddChest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperUseCases_AddChest_Call) RunAndReturn(run func(context.Context, *dto.Chest, *dto.History) (*dto.History, error)) *MockKeeperUseCases_AddChest_Call {
	_c.Call.Return(run)
	return _c
}

// Auth provides a mock function with given fields: ctx, token
func (_m *MockKeeperUseCases) Auth(ctx context.Context, token string) (*uuid.UUID, error) {
	ret := _m.Called(ctx, token)

	var r0 *uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*uuid.UUID, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *uuid.UUID); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperUseCases_Auth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Auth'
type MockKeeperUseCases_Auth_Call struct {
	*mock.Call
}

// Auth is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockKeeperUseCases_Expecter) Auth(ctx interface{}, token interface{}) *MockKeeperUseCases_Auth_Call {
	return &MockKeeperUseCases_Auth_Call{Call: _e.mock.On("Auth", ctx, token)}
}

func (_c *MockKeeperUseCases_Auth_Call) Run(run func(ctx context.Context, token string)) *MockKeeperUseCases_Auth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockKeeperUseCases_Auth_Call) Return(_a0 *uuid.UUID, _a1 error) *MockKeeperUseCases_Auth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperUseCases_Auth_Call) RunAndReturn(run func(context.Context, string) (*uuid.UUID, error)) *MockKeeperUseCases_Auth_Call {
	_c.Call.Return(run)
	return _c
}

// AuthentificationError provides a mock function with given fields: err
func (_m *MockKeeperUseCases) AuthentificationError(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockKeeperUseCases_AuthentificationError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthentificationError'
type MockKeeperUseCases_AuthentificationError_Call struct {
	*mock.Call
}

// AuthentificationError is a helper method to define mock.On call
//   - err error
func (_e *MockKeeperUseCases_Expecter) AuthentificationError(err interface{}) *MockKeeperUseCases_AuthentificationError_Call {
	return &MockKeeperUseCases_AuthentificationError_Call{Call: _e.mock.On("AuthentificationError", err)}
}

func (_c *MockKeeperUseCases_AuthentificationError_Call) Run(run func(err error)) *MockKeeperUseCases_AuthentificationError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockKeeperUseCases_AuthentificationError_Call) Return(_a0 bool) *MockKeeperUseCases_AuthentificationError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperUseCases_AuthentificationError_Call) RunAndReturn(run func(error) bool) *MockKeeperUseCases_AuthentificationError_Call {
	_c.Call.Return(run)
	return _c
}

// ConflictError provides a mock function with given fields: err
func (_m *MockKeeperUseCases) ConflictError(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockKeeperUseCases_ConflictError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConflictError'
type MockKeeperUseCases_ConflictError_Call struct {
	*mock.Call
}

// ConflictError is a helper method to define mock.On call
//   - err error
func (_e *MockKeeperUseCases_Expecter) ConflictError(err interface{}) *MockKeeperUseCases_ConflictError_Call {
	return &MockKeeperUseCases_ConflictError_Call{Call: _e.mock.On("ConflictError", err)}
}

func (_c *MockKeeperUseCases_ConflictError_Call) Run(run func(err error)) *MockKeeperUseCases_ConflictError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockKeeperUseCases_ConflictError_Call) Return(_a0 bool) *MockKeeperUseCases_ConflictError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperUseCases_ConflictError_Call) RunAndReturn(run func(error) bool) *MockKeeperUseCases_ConflictError_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChest provides a mock function with given fields: ctx, history
func (_m *MockKeeperUseCases) DeleteChest(ctx context.Context, history *dto.History) (*dto.History, error) {
	ret := _m.Called(ctx, history)

	var r0 *dto.History
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.History) (*dto.History, error)); ok {
		return rf(ctx, history)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.History) *dto.History); ok {
		r0 = rf(ctx, history)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.History)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.History) error); ok {
		r1 = rf(ctx, history)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperUseCases_DeleteChest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChest'
type MockKeeperUseCases_DeleteChest_Call struct {
	*mock.Call
}

// DeleteChest is a helper method to define mock.On call
//   - ctx context.Context
//   - history *dto.History
func (_e *MockKeeperUseCases_Expecter) DeleteChest(ctx interface{}, history interface{}) *MockKeeperUseCases_DeleteChest_Call {
	return &MockKeeperUseCases_DeleteChest_Call{Call: _e.mock.On("DeleteChest", ctx, history)}
}

func (_c *MockKeeperUseCases_DeleteChest_Call) Run(run func(ctx context.Context, history *dto.History)) *MockKeeperUseCases_DeleteChest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.History))
	})
	return _c
}

func (_c *MockKeeperUseCases_DeleteChest_Call) Return(_a0 *dto.History, _a1 error) *MockKeeperUseCases_DeleteChest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperUseCases_DeleteChest_Call) RunAndReturn(run func(context.Context, *dto.History) (*dto.History, error)) *MockKeeperUseCases_DeleteChest_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractUserErrorMessage provides a mock function with given fields: err
func (_m *MockKeeperUseCases) ExtractUserErrorMessage(err error) string {
	ret := _m.Called(err)

	var r0 string
	if rf, ok := ret.Get(0).(func(error) string); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockKeeperUseCases_ExtractUserErrorMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractUserErrorMessage'
type MockKeeperUseCases_ExtractUserErrorMessage_Call struct {
	*mock.Call
}

// ExtractUserErrorMessage is a helper method to define mock.On call
//   - err error
func (_e *MockKeeperUseCases_Expecter) ExtractUserErrorMessage(err interface{}) *MockKeeperUseCases_ExtractUserErrorMessage_Call {
	return &MockKeeperUseCases_ExtractUserErrorMessage_Call{Call: _e.mock.On("ExtractUserErrorMessage", err)}
}

func (_c *MockKeeperUseCases_ExtractUserErrorMessage_Call) Run(run func(err error)) *MockKeeperUseCases_ExtractUserErrorMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockKeeperUseCases_ExtractUserErrorMessage_Call) Return(_a0 string) *MockKeeperUseCases_ExtractUserErrorMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperUseCases_ExtractUserErrorMessage_Call) RunAndReturn(run func(error) string) *MockKeeperUseCases_ExtractUserErrorMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetChestByID provides a mock function with given fields: ctx, chestID, userID
func (_m *MockKeeperUseCases) GetChestByID(ctx context.Context, chestID string, userID uuid.UUID) (*dto.Chest, *dto.History, error) {
	ret := _m.Called(ctx, chestID, userID)

	var r0 *dto.Chest
	var r1 *dto.History
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) (*dto.Chest, *dto.History, error)); ok {
		return rf(ctx, chestID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) *dto.Chest); ok {
		r0 = rf(ctx, chestID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Chest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID) *dto.History); ok {
		r1 = rf(ctx, chestID, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dto.History)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, uuid.UUID) error); ok {
		r2 = rf(ctx, chestID, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockKeeperUseCases_GetChestByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChestByID'
type MockKeeperUseCases_GetChestByID_Call struct {
	*mock.Call
}

// GetChestByID is a helper method to define mock.On call
//   - ctx context.Context
//   - chestID string
//   - userID uuid.UUID
func (_e *MockKeeperUseCases_Expecter) GetChestByID(ctx interface{}, chestID interface{}, userID interface{}) *MockKeeperUseCases_GetChestByID_Call {
	return &MockKeeperUseCases_GetChestByID_Call{Call: _e.mock.On("GetChestByID", ctx, chestID, userID)}
}

func (_c *MockKeeperUseCases_GetChestByID_Call) Run(run func(ctx context.Context, chestID string, userID uuid.UUID)) *MockKeeperUseCases_GetChestByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockKeeperUseCases_GetChestByID_Call) Return(_a0 *dto.Chest, _a1 *dto.History, _a2 error) *MockKeeperUseCases_GetChestByID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockKeeperUseCases_GetChestByID_Call) RunAndReturn(run func(context.Context, string, uuid.UUID) (*dto.Chest, *dto.History, error)) *MockKeeperUseCases_GetChestByID_Call {
	_c.Call.Return(run)
	return _c
}

// InternalError provides a mock function with given fields: err
func (_m *MockKeeperUseCases) InternalError(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockKeeperUseCases_InternalError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InternalError'
type MockKeeperUseCases_InternalError_Call struct {
	*mock.Call
}

// InternalError is a helper method to define mock.On call
//   - err error
func (_e *MockKeeperUseCases_Expecter) InternalError(err interface{}) *MockKeeperUseCases_InternalError_Call {
	return &MockKeeperUseCases_InternalError_Call{Call: _e.mock.On("InternalError", err)}
}

func (_c *MockKeeperUseCases_InternalError_Call) Run(run func(err error)) *MockKeeperUseCases_InternalError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockKeeperUseCases_InternalError_Call) Return(_a0 bool) *MockKeeperUseCases_InternalError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperUseCases_InternalError_Call) RunAndReturn(run func(error) bool) *MockKeeperUseCases_InternalError_Call {
	_c.Call.Return(run)
	return _c
}

// NotFoundError provides a mock function with given fields: err
func (_m *MockKeeperUseCases) NotFoundError(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockKeeperUseCases_NotFoundError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotFoundError'
type MockKeeperUseCases_NotFoundError_Call struct {
	*mock.Call
}

// NotFoundError is a helper method to define mock.On call
//   - err error
func (_e *MockKeeperUseCases_Expecter) NotFoundError(err interface{}) *MockKeeperUseCases_NotFoundError_Call {
	return &MockKeeperUseCases_NotFoundError_Call{Call: _e.mock.On("NotFoundError", err)}
}

func (_c *MockKeeperUseCases_NotFoundError_Call) Run(run func(err error)) *MockKeeperUseCases_NotFoundError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockKeeperUseCases_NotFoundError_Call) Return(_a0 bool) *MockKeeperUseCases_NotFoundError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperUseCases_NotFoundError_Call) RunAndReturn(run func(error) bool) *MockKeeperUseCases_NotFoundError_Call {
	_c.Call.Return(run)
	return _c
}

// SignIn provides a mock function with given fields: ctx, data
func (_m *MockKeeperUseCases) SignIn(ctx context.Context, data dto.AuthDataDto) (*dto.AuthTokenDto, error) {
	ret := _m.Called(ctx, data)

	var r0 *dto.AuthTokenDto
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.AuthDataDto) (*dto.AuthTokenDto, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.AuthDataDto) *dto.AuthTokenDto); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AuthTokenDto)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.AuthDataDto) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperUseCases_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type MockKeeperUseCases_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//   - ctx context.Context
//   - data dto.AuthDataDto
func (_e *MockKeeperUseCases_Expecter) SignIn(ctx interface{}, data interface{}) *MockKeeperUseCases_SignIn_Call {
	return &MockKeeperUseCases_SignIn_Call{Call: _e.mock.On("SignIn", ctx, data)}
}

func (_c *MockKeeperUseCases_SignIn_Call) Run(run func(ctx context.Context, data dto.AuthDataDto)) *MockKeeperUseCases_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.AuthDataDto))
	})
	return _c
}

func (_c *MockKeeperUseCases_SignIn_Call) Return(_a0 *dto.AuthTokenDto, _a1 error) *MockKeeperUseCases_SignIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperUseCases_SignIn_Call) RunAndReturn(run func(context.Context, dto.AuthDataDto) (*dto.AuthTokenDto, error)) *MockKeeperUseCases_SignIn_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: ctx, data
func (_m *MockKeeperUseCases) SignUp(ctx context.Context, data dto.AuthDataDto) (*dto.AuthTokenDto, error) {
	ret := _m.Called(ctx, data)

	var r0 *dto.AuthTokenDto
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.AuthDataDto) (*dto.AuthTokenDto, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.AuthDataDto) *dto.AuthTokenDto); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AuthTokenDto)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.AuthDataDto) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperUseCases_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type MockKeeperUseCases_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx context.Context
//   - data dto.AuthDataDto
func (_e *MockKeeperUseCases_Expecter) SignUp(ctx interface{}, data interface{}) *MockKeeperUseCases_SignUp_Call {
	return &MockKeeperUseCases_SignUp_Call{Call: _e.mock.On("SignUp", ctx, data)}
}

func (_c *MockKeeperUseCases_SignUp_Call) Run(run func(ctx context.Context, data dto.AuthDataDto)) *MockKeeperUseCases_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.AuthDataDto))
	})
	return _c
}

func (_c *MockKeeperUseCases_SignUp_Call) Return(_a0 *dto.AuthTokenDto, _a1 error) *MockKeeperUseCases_SignUp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperUseCases_SignUp_Call) RunAndReturn(run func(context.Context, dto.AuthDataDto) (*dto.AuthTokenDto, error)) *MockKeeperUseCases_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with given fields: ctx, history, userID
func (_m *MockKeeperUseCases) Sync(ctx context.Context, history []*dto.History, userID uuid.UUID) ([]*dto.History, error) {
	ret := _m.Called(ctx, history, userID)

	var r0 []*dto.History
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*dto.History, uuid.UUID) ([]*dto.History, error)); ok {
		return rf(ctx, history, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*dto.History, uuid.UUID) []*dto.History); ok {
		r0 = rf(ctx, history, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.History)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*dto.History, uuid.UUID) error); ok {
		r1 = rf(ctx, history, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperUseCases_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type MockKeeperUseCases_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - ctx context.Context
//   - history []*dto.History
//   - userID uuid.UUID
func (_e *MockKeeperUseCases_Expecter) Sync(ctx interface{}, history interface{}, userID interface{}) *MockKeeperUseCases_Sync_Call {
	return &MockKeeperUseCases_Sync_Call{Call: _e.mock.On("Sync", ctx, history, userID)}
}

func (_c *MockKeeperUseCases_Sync_Call) Run(run func(ctx context.Context, history []*dto.History, userID uuid.UUID)) *MockKeeperUseCases_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*dto.History), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockKeeperUseCases_Sync_Call) Return(_a0 []*dto.History, _a1 error) *MockKeeperUseCases_Sync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperUseCases_Sync_Call) RunAndReturn(run func(context.Context, []*dto.History, uuid.UUID) ([]*dto.History, error)) *MockKeeperUseCases_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertChest provides a mock function with given fields: ctx, chest, history
func (_m *MockKeeperUseCases) UpsertChest(ctx context.Context, chest *dto.Chest, history *dto.History) (*dto.History, error) {
	ret := _m.Called(ctx, chest, history)

	var r0 *dto.History
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Chest, *dto.History) (*dto.History, error)); ok {
		return rf(ctx, chest, history)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.Chest, *dto.History) *dto.History); ok {
		r0 = rf(ctx, chest, history)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.History)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.Chest, *dto.History) error); ok {
		r1 = rf(ctx, chest, history)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeeperUseCases_UpsertChest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertChest'
type MockKeeperUseCases_UpsertChest_Call struct {
	*mock.Call
}

// UpsertChest is a helper method to define mock.On call
//   - ctx context.Context
//   - chest *dto.Chest
//   - history *dto.History
func (_e *MockKeeperUseCases_Expecter) UpsertChest(ctx interface{}, chest interface{}, history interface{}) *MockKeeperUseCases_UpsertChest_Call {
	return &MockKeeperUseCases_UpsertChest_Call{Call: _e.mock.On("UpsertChest", ctx, chest, history)}
}

func (_c *MockKeeperUseCases_UpsertChest_Call) Run(run func(ctx context.Context, chest *dto.Chest, history *dto.History)) *MockKeeperUseCases_UpsertChest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.Chest), args[2].(*dto.History))
	})
	return _c
}

func (_c *MockKeeperUseCases_UpsertChest_Call) Return(_a0 *dto.History, _a1 error) *MockKeeperUseCases_UpsertChest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeeperUseCases_UpsertChest_Call) RunAndReturn(run func(context.Context, *dto.Chest, *dto.History) (*dto.History, error)) *MockKeeperUseCases_UpsertChest_Call {
	_c.Call.Return(run)
	return _c
}

// ValidationError provides a mock function with given fields: err
func (_m *MockKeeperUseCases) ValidationError(err error) bool {
	ret := _m.Called(err)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockKeeperUseCases_ValidationError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidationError'
type MockKeeperUseCases_ValidationError_Call struct {
	*mock.Call
}

// ValidationError is a helper method to define mock.On call
//   - err error
func (_e *MockKeeperUseCases_Expecter) ValidationError(err interface{}) *MockKeeperUseCases_ValidationError_Call {
	return &MockKeeperUseCases_ValidationError_Call{Call: _e.mock.On("ValidationError", err)}
}

func (_c *MockKeeperUseCases_ValidationError_Call) Run(run func(err error)) *MockKeeperUseCases_ValidationError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockKeeperUseCases_ValidationError_Call) Return(_a0 bool) *MockKeeperUseCases_ValidationError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeeperUseCases_ValidationError_Call) RunAndReturn(run func(error) bool) *MockKeeperUseCases_ValidationError_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockKeeperUseCases interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockKeeperUseCases creates a new instance of MockKeeperUseCases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockKeeperUseCases(t mockConstructorTestingTNewMockKeeperUseCases) *MockKeeperUseCases {
	mock := &MockKeeperUseCases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
