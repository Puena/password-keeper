// Code generated by mockery v2.26.1. DO NOT EDIT.

package usecases

import (
	context "context"

	models "github.com/Puena/password-keeper/server/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUsersRepository is an autogenerated mock type for the UsersRepository type
type MockUsersRepository struct {
	mock.Mock
}

type MockUsersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersRepository) EXPECT() *MockUsersRepository_Expecter {
	return &MockUsersRepository_Expecter{mock: &_m.Mock}
}

// ConflictError provides a mock function with given fields: err
func (_m *MockUsersRepository) ConflictError(err error) error {
	ret := _m.Called(err)

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_ConflictError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConflictError'
type MockUsersRepository_ConflictError_Call struct {
	*mock.Call
}

// ConflictError is a helper method to define mock.On call
//   - err error
func (_e *MockUsersRepository_Expecter) ConflictError(err interface{}) *MockUsersRepository_ConflictError_Call {
	return &MockUsersRepository_ConflictError_Call{Call: _e.mock.On("ConflictError", err)}
}

func (_c *MockUsersRepository_ConflictError_Call) Run(run func(err error)) *MockUsersRepository_ConflictError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockUsersRepository_ConflictError_Call) Return(_a0 error) *MockUsersRepository_ConflictError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_ConflictError_Call) RunAndReturn(run func(error) error) *MockUsersRepository_ConflictError_Call {
	_c.Call.Return(run)
	return _c
}

// InsertUser provides a mock function with given fields: ctx, data
func (_m *MockUsersRepository) InsertUser(ctx context.Context, data *models.UserModel) (*uuid.UUID, error) {
	ret := _m.Called(ctx, data)

	var r0 *uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserModel) (*uuid.UUID, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserModel) *uuid.UUID); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UserModel) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_InsertUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertUser'
type MockUsersRepository_InsertUser_Call struct {
	*mock.Call
}

// InsertUser is a helper method to define mock.On call
//   - ctx context.Context
//   - data *models.UserModel
func (_e *MockUsersRepository_Expecter) InsertUser(ctx interface{}, data interface{}) *MockUsersRepository_InsertUser_Call {
	return &MockUsersRepository_InsertUser_Call{Call: _e.mock.On("InsertUser", ctx, data)}
}

func (_c *MockUsersRepository_InsertUser_Call) Run(run func(ctx context.Context, data *models.UserModel)) *MockUsersRepository_InsertUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.UserModel))
	})
	return _c
}

func (_c *MockUsersRepository_InsertUser_Call) Return(_a0 *uuid.UUID, _a1 error) *MockUsersRepository_InsertUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_InsertUser_Call) RunAndReturn(run func(context.Context, *models.UserModel) (*uuid.UUID, error)) *MockUsersRepository_InsertUser_Call {
	_c.Call.Return(run)
	return _c
}

// NotFoundError provides a mock function with given fields: err
func (_m *MockUsersRepository) NotFoundError(err error) error {
	ret := _m.Called(err)

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_NotFoundError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotFoundError'
type MockUsersRepository_NotFoundError_Call struct {
	*mock.Call
}

// NotFoundError is a helper method to define mock.On call
//   - err error
func (_e *MockUsersRepository_Expecter) NotFoundError(err interface{}) *MockUsersRepository_NotFoundError_Call {
	return &MockUsersRepository_NotFoundError_Call{Call: _e.mock.On("NotFoundError", err)}
}

func (_c *MockUsersRepository_NotFoundError_Call) Run(run func(err error)) *MockUsersRepository_NotFoundError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockUsersRepository_NotFoundError_Call) Return(_a0 error) *MockUsersRepository_NotFoundError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_NotFoundError_Call) RunAndReturn(run func(error) error) *MockUsersRepository_NotFoundError_Call {
	_c.Call.Return(run)
	return _c
}

// RepositoryError provides a mock function with given fields: err
func (_m *MockUsersRepository) RepositoryError(err error) error {
	ret := _m.Called(err)

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsersRepository_RepositoryError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RepositoryError'
type MockUsersRepository_RepositoryError_Call struct {
	*mock.Call
}

// RepositoryError is a helper method to define mock.On call
//   - err error
func (_e *MockUsersRepository_Expecter) RepositoryError(err interface{}) *MockUsersRepository_RepositoryError_Call {
	return &MockUsersRepository_RepositoryError_Call{Call: _e.mock.On("RepositoryError", err)}
}

func (_c *MockUsersRepository_RepositoryError_Call) Run(run func(err error)) *MockUsersRepository_RepositoryError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockUsersRepository_RepositoryError_Call) Return(_a0 error) *MockUsersRepository_RepositoryError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsersRepository_RepositoryError_Call) RunAndReturn(run func(error) error) *MockUsersRepository_RepositoryError_Call {
	_c.Call.Return(run)
	return _c
}

// SelectUserByID provides a mock function with given fields: ctx, id
func (_m *MockUsersRepository) SelectUserByID(ctx context.Context, id uuid.UUID) (*models.UserModel, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.UserModel, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.UserModel); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_SelectUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectUserByID'
type MockUsersRepository_SelectUserByID_Call struct {
	*mock.Call
}

// SelectUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockUsersRepository_Expecter) SelectUserByID(ctx interface{}, id interface{}) *MockUsersRepository_SelectUserByID_Call {
	return &MockUsersRepository_SelectUserByID_Call{Call: _e.mock.On("SelectUserByID", ctx, id)}
}

func (_c *MockUsersRepository_SelectUserByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUsersRepository_SelectUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUsersRepository_SelectUserByID_Call) Return(_a0 *models.UserModel, _a1 error) *MockUsersRepository_SelectUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_SelectUserByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.UserModel, error)) *MockUsersRepository_SelectUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// SelectUserByLogin provides a mock function with given fields: ctx, login
func (_m *MockUsersRepository) SelectUserByLogin(ctx context.Context, login string) (*models.UserModel, error) {
	ret := _m.Called(ctx, login)

	var r0 *models.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserModel, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserModel); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersRepository_SelectUserByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectUserByLogin'
type MockUsersRepository_SelectUserByLogin_Call struct {
	*mock.Call
}

// SelectUserByLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
func (_e *MockUsersRepository_Expecter) SelectUserByLogin(ctx interface{}, login interface{}) *MockUsersRepository_SelectUserByLogin_Call {
	return &MockUsersRepository_SelectUserByLogin_Call{Call: _e.mock.On("SelectUserByLogin", ctx, login)}
}

func (_c *MockUsersRepository_SelectUserByLogin_Call) Run(run func(ctx context.Context, login string)) *MockUsersRepository_SelectUserByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUsersRepository_SelectUserByLogin_Call) Return(_a0 *models.UserModel, _a1 error) *MockUsersRepository_SelectUserByLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersRepository_SelectUserByLogin_Call) RunAndReturn(run func(context.Context, string) (*models.UserModel, error)) *MockUsersRepository_SelectUserByLogin_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockUsersRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockUsersRepository creates a new instance of MockUsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockUsersRepository(t mockConstructorTestingTNewMockUsersRepository) *MockUsersRepository {
	mock := &MockUsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
