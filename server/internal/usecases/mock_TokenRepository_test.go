// Code generated by mockery v2.26.1. DO NOT EDIT.

package usecases

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockTokenRepository is an autogenerated mock type for the TokenRepository type
type MockTokenRepository struct {
	mock.Mock
}

type MockTokenRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenRepository) EXPECT() *MockTokenRepository_Expecter {
	return &MockTokenRepository_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: ctx, userID
func (_m *MockTokenRepository) GenerateToken(ctx context.Context, userID uuid.UUID) (string, error) {
	ret := _m.Called(ctx, userID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenRepository_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockTokenRepository_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockTokenRepository_Expecter) GenerateToken(ctx interface{}, userID interface{}) *MockTokenRepository_GenerateToken_Call {
	return &MockTokenRepository_GenerateToken_Call{Call: _e.mock.On("GenerateToken", ctx, userID)}
}

func (_c *MockTokenRepository_GenerateToken_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockTokenRepository_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockTokenRepository_GenerateToken_Call) Return(_a0 string, _a1 error) *MockTokenRepository_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenRepository_GenerateToken_Call) RunAndReturn(run func(context.Context, uuid.UUID) (string, error)) *MockTokenRepository_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// RepositoryError provides a mock function with given fields: err
func (_m *MockTokenRepository) RepositoryError(err error) error {
	ret := _m.Called(err)

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokenRepository_RepositoryError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RepositoryError'
type MockTokenRepository_RepositoryError_Call struct {
	*mock.Call
}

// RepositoryError is a helper method to define mock.On call
//   - err error
func (_e *MockTokenRepository_Expecter) RepositoryError(err interface{}) *MockTokenRepository_RepositoryError_Call {
	return &MockTokenRepository_RepositoryError_Call{Call: _e.mock.On("RepositoryError", err)}
}

func (_c *MockTokenRepository_RepositoryError_Call) Run(run func(err error)) *MockTokenRepository_RepositoryError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockTokenRepository_RepositoryError_Call) Return(_a0 error) *MockTokenRepository_RepositoryError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenRepository_RepositoryError_Call) RunAndReturn(run func(error) error) *MockTokenRepository_RepositoryError_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: ctx, token
func (_m *MockTokenRepository) ValidateToken(ctx context.Context, token string) (*uuid.UUID, error) {
	ret := _m.Called(ctx, token)

	var r0 *uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*uuid.UUID, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *uuid.UUID); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenRepository_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockTokenRepository_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockTokenRepository_Expecter) ValidateToken(ctx interface{}, token interface{}) *MockTokenRepository_ValidateToken_Call {
	return &MockTokenRepository_ValidateToken_Call{Call: _e.mock.On("ValidateToken", ctx, token)}
}

func (_c *MockTokenRepository_ValidateToken_Call) Run(run func(ctx context.Context, token string)) *MockTokenRepository_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenRepository_ValidateToken_Call) Return(_a0 *uuid.UUID, _a1 error) *MockTokenRepository_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenRepository_ValidateToken_Call) RunAndReturn(run func(context.Context, string) (*uuid.UUID, error)) *MockTokenRepository_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockTokenRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTokenRepository creates a new instance of MockTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTokenRepository(t mockConstructorTestingTNewMockTokenRepository) *MockTokenRepository {
	mock := &MockTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
